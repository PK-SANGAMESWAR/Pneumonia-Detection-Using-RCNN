# -*- coding: utf-8 -*-
"""RCNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mh8BrvTB9K_Qz1kgYtp7auuOTv5wSa_z
"""

!pip install notebook

!pip install jupyter_http_over_ws
jupyter serverextension enable --py jupyter_http_over_ws

!pip install tensorflow

docker run -p 127.0.0.1:8888:8080 us-docker.pkg.dev/colab-images/public/runtime

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
from PIL import Image
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.models import load_model
from keras.utils import img_to_array
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16

# Ensure inline plotting for Jupyter notebooks
# %matplotlib inline

# Data directories
main_dir = r"\content\drive\MyDrive\Project\unzipped_folder\chest_xray"
train_data_dir = main_dir + r"\train"
validation_data_dir = main_dir + r"\val"
test_data_dir = main_dir + r"\test"

img_height, img_width = 180, 180

# Using VGG16 as a feature extractor for RCNN
base_model = VGG16(weights="imagenet", include_top=False, input_shape=(img_height, img_width, 3))

# Freezing the VGG16 layers
for layer in base_model.layers:
    layer.trainable = False

# RCNN-style custom head
model = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(256, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(1, activation="sigmoid")  # Binary classification
])

model.summary()

# Compile the RCNN model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

# Paths
train_data_dir = '/content/drive/MyDrive/Project/unzipped_folder/chest_xray/train'
validation_data_dir = '/content/drive/MyDrive/Project/unzipped_folder/chest_xray/val'

# Check paths
if not os.path.exists(train_data_dir):
    raise FileNotFoundError(f"Training directory not found: {train_data_dir}")
if not os.path.exists(validation_data_dir):
    raise FileNotFoundError(f"Validation directory not found: {validation_data_dir}")

# Image dimensions
img_width, img_height = 180, 180

# Data augmentation
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

# Data generators
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=16,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=16,
    class_mode='binary')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt

# Training the model
early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Check generators
print(f"Number of training samples: {train_generator.samples}")
print(f"Number of validation samples: {validation_generator.samples}")

import tensorflow as tf

# Check if GPU is available
if tf.test.gpu_device_name():
    print(f"Using GPU: {tf.test.gpu_device_name()}")
    with tf.device('/GPU:0'):
        history = model.fit(
            train_generator,
            epochs=20,
            validation_data=validation_generator,
            callbacks=[early_stopping_cb],
            verbose=True
        )
else:
    print("No GPU detected. Using CPU.")
    history = model.fit(
        train_generator,
        epochs=20,
        validation_data=validation_generator,
        callbacks=[early_stopping_cb],
        verbose=True
    )


# Save the model
model.save('chestxray_rcnn_model.h5')

# Predict function for RCNN
def predict_image_rcnn(filename):
    img = load_img(filename, target_size=(img_height, img_width))
    image = img_to_array(img) / 255.0
    image = np.expand_dims(image, axis=0)
    prediction = model.predict(image)

    plt.imshow(img)
    plt.axis("off")
    if prediction[0] > 0.5:
        print("Predicted: PNEUMONIA")
    else:
        print("Predicted: NORMAL")

# Test prediction
filename = "/content/drive/MyDrive/Project/unzipped_folder/chest_xray/train/NORMAL/IM-0140-0001.jpeg"
predict_image_rcnn(filename)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models # Importing necessary modules
from tensorflow.keras.applications import VGG16
# Modify EarlyStopping callback
early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=2, restore_best_weights=True)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Check if GPU is available
if tf.test.gpu_device_name():
    print(f"Using GPU: {tf.test.gpu_device_name()}")
    with tf.device('/GPU:0'):
        history = model.fit(
            train_generator,
            epochs=10,  # Reduced number of epochs
            validation_data=validation_generator,
            callbacks=[early_stopping_cb],
            verbose=True
        )
else:
    print("No GPU detected. Using CPU.")
    history = model.fit(
        train_generator,
        epochs=10,  # Reduced number of epochs
        validation_data=validation_generator,
        callbacks=[early_stopping_cb],
        verbose=True
    )

# Save the model
model.save('chestxray_rcnn_model_reduced.h5')

# Predict function for RCNN
def predict_image_rcnn(filename, img_height=128, img_width=128):  # Adjusted image size
    img = load_img(filename, target_size=(img_height, img_width))
    image = img_to_array(img) / 255.0
    image = np.expand_dims(image, axis=0)
    prediction = model.predict(image)

    plt.imshow(img)
    plt.axis("off")
    if prediction[0] > 0.5:
        print("Predicted: PNEUMONIA")
    else:
        print("Predicted: NORMAL")

# Test prediction
filename = "/content/drive/MyDrive/Project/unzipped_folder/chest_xray/train/NORMAL/IM-0140-0001.jpeg"
predict_image_rcnn(filename)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models # Importing necessary modules
from tensorflow.keras.applications import VGG16


# Define the model here again before compiling and training
img_height, img_width = 180, 180  # Define image dimensions

# Using VGG16 as a feature extractor for RCNN
base_model = VGG16(weights="imagenet", include_top=False, input_shape=(img_height, img_width, 3))

# Freezing the VGG16 layers
for layer in base_model.layers:
    layer.trainable = False

# RCNN-style custom head
model = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(256, activation="relu"),
    layers.Dropout(0.5),
    layers.Dense(1, activation="sigmoid")  # Binary classification
])

# Modify EarlyStopping callback
early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=2, restore_best_weights=True)

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
# Check generators
print(f"Number of training samples: {train_generator.samples}")
print(f"Number of validation samples: {validation_generator.samples}")

import tensorflow as tf

# Check if GPU is available
if tf.test.gpu_device_name():
    print(f"Using GPU: {tf.test.gpu_device_name()}")
    with tf.device('/GPU:0'):
        history = model.fit(
            train_generator,
            epochs=20,
            validation_data=validation_generator,
            callbacks=[early_stopping_cb],
            verbose=True
        )
else:
    print("No GPU detected. Using CPU.")
    history = model.fit(
        train_generator,
        epochs=20,
        validation_data=validation_generator,
        callbacks=[early_stopping_cb],
        verbose=True
    )


# Save the model
model.save('chestxray_rcnn_model.h5')

# Predict function for RCNN
def predict_image_rcnn(filename):
    img = load_img(filename, target_size=(img_height, img_width))
    image = img_to_array(img) / 255.0
    image = np.expand_dims(image, axis=0)
    prediction = model.predict(image)

    plt.imshow(img)
    plt.axis("off")
    if prediction[0] > 0.5:
        print("Predicted: PNEUMONIA")
    else:
        print("Predicted: NORMAL")

# Test prediction
filename = "/content/drive/MyDrive/Project/unzipped_folder/chest_xray/train/NORMAL/IM-0140-0001.jpeg"
predict_image_rcnn(filename)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16
import os  # Import the os module

# ... (Model definition and training as before) ...

# Save the model
model_save_path = os.path.join(os.getcwd(), 'chestxray_rcnn_model_reduced.h5') # Construct save path using os.path.join
print(f"Saving model to: {model_save_path}")  # Print the save path
try:
    model.save(model_save_path)
    print("Model saved successfully!")
except Exception as e:
    print(f"Error saving model: {e}")

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
import os

model_save_path = os.path.join(os.getcwd(), '/content/chestxray_rcnn_model.h5')
model = tf.keras.models.load_model(model_save_path)

def predict_image_rcnn(filename, img_height=180, img_width=180):
    img = load_img(filename, target_size=(img_height, img_width))
    image = img_to_array(img) / 255.0
    image = np.expand_dims(image, axis=0)
    prediction = model.predict(image)

    plt.imshow(img)
    plt.axis("off")
    if prediction[0] > 0.5:
        print("Predicted: PNEUMONIA")
    else:
        print("Predicted: NORMAL")

filename = "/content/drive/MyDrive/Project/unzipped_folder/chest_xray/test/PNEUMONIA/person100_bacteria_477.jpeg"
predict_image_rcnn(filename)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
import os
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# --- Load the saved model ---
model_save_path = os.path.join(os.getcwd(), '/content/chestxray_rcnn_model.h5')  # Your specified path
model = tf.keras.models.load_model(model_save_path)

# --- Data preparation ---
img_height, img_width = 180, 180

# Paths
train_data_dir = '/content/drive/MyDrive/Project/unzipped_folder/chest_xray/train'
validation_data_dir = '/content/drive/MyDrive/Project/unzipped_folder/chest_xray/val'

# Check paths
if not os.path.exists(train_data_dir):
    raise FileNotFoundError(f"Training directory not found: {train_data_dir}")
if not os.path.exists(validation_data_dir):
    raise FileNotFoundError(f"Validation directory not found: {validation_data_dir}")

# Data augmentation
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

# Data generators
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=16,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=16,
    class_mode='binary')

# --- Evaluate the model ---
train_loss, train_accuracy = model.evaluate(train_generator, verbose=0)
validation_loss, validation_accuracy = model.evaluate(validation_generator, verbose=0)

print(f"Training Accuracy: {train_accuracy:.4f}")
print(f"Validation Accuracy: {validation_accuracy:.4f}")

# --- Check for overfitting/underfitting ---
if train_accuracy > validation_accuracy and (train_accuracy - validation_accuracy) > 0.1:  # Adjust threshold as needed
    print("Possible overfitting detected.")
elif train_accuracy < 0.5 and validation_accuracy < 0.5:  # Adjust threshold as needed
    print("Possible underfitting detected.")
else:
    print("Model seems to be generalizing well.")



import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np
import matplotlib.pyplot as plt
import os
from tensorflow.keras import layers, models
from tensorflow.keras.applications import VGG16
from tensorflow.keras.preprocessing.image import ImageDataGenerator
plt.figure(figsize=(8, 6))
plt.plot(['Training', 'Validation'], [train_accuracy, validation_accuracy], marker='o', linestyle='-', color='b')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Dataset')
plt.ylim([0, 1])  # Set y-axis limits to 0-1 for accuracy
plt.grid(True)
if train_accuracy > validation_accuracy and (train_accuracy - validation_accuracy) > 0.1:
    plt.annotate('Possible Overfitting', xy=(1, validation_accuracy), xytext=(1.2, validation_accuracy),
                 arrowprops=dict(facecolor='red', arrowstyle='->'))
elif train_accuracy < 0.5 and validation_accuracy < 0.5:
    plt.annotate('Possible Underfitting', xy=(0.5, train_accuracy), xytext=(0.5, train_accuracy + 0.1),
                 arrowprops=dict(facecolor='red', arrowstyle='->'))

plt.show()



model_save_path = os.path.join(os.getcwd(), 'chestxray_rcnn_model_reduced.h5') # Construct save path using os.path.join
print(f"Saving model to: {model_save_path}")  # Print the save path
try:
    model.save(model_save_path)
    print("Model saved successfully!")
except Exception as e:
    print(f"Error saving model: {e}")